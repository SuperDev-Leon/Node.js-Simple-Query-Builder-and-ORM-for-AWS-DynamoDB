#!/usr/bin/env node
'use strict';

var Liftoff   = require('liftoff');
var interpret = require('interpret');
var program = require('commander');
var fs = require('fs');
var templates = require('../templates/index');
var readline = require('readline');
var argv = require('minimist')(process.argv.slice(2));
var chalk = require('chalk');
var _ = require('lodash');
var Migrator = require('../migrate/migrator');

var rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function padDate(t){
  if(t < 10) t = "0"+t.toString();
  return t;
}

function exitWithError(text) {
  console.error(chalk.red(text));
  process.exit(1);
}

function exit(text) {
  if(text) {
    console.log(text);
  }
  process.exit(0);
}

var npdfile;

function npdFile(){
  npdfile = npdfile || require(process.cwd() + "/npdfile");
  return npdfile;
}

function migrationFilePath(){
  var _migrationFilePath = (npdFile().migration && npdFile().migration.migrationFilePath) ? npdFile().migration.migrationFilePath : 'migrations'
  return process.cwd() + '/' + _migrationFilePath;
}

function initialize(){
  program.version(require('../../package.json').version);

  program
  .command('init')
  .description('        Create a fresh npdfile.')
  .action(function() {

    var npdPath = process.cwd() + "/npdfile.js";

    if(fs.existsSync(npdPath)){
      rl.question('Npdfile is already existed. Do you want to overwrite it? [Y/n]', function(answer) {
        if(answer.toLowerCase() == 'y'){
          fs.writeFileSync(npdPath, templates.npdfile);
          exit('Overwrote the npdfile.');
        }
        rl.close();
      });

    }else{
      fs.writeFileSync(npdPath, templates.npdfile);
      exit('Created npdfile.js');
    }

  });

  program
  .command('migrate:generate <name>')
  .description('       Create a named migration file.')
  .action(function(name) {
    var migrationDir = migrationFilePath();

    if(!fs.existsSync(migrationDir)){
      fs.mkdirSync(migrationDir);
    }

    var now = new Date();
    var d = new Date(Date.UTC(now.getFullYear(), now.getMonth(), now.getDay(), now.getHours(), now.getMinutes(), now.getSeconds()));

    var migrateFileParts = [
      d.getFullYear(),
      padDate(d.getMonth()+1),
      padDate(d.getDay()+1),
      padDate(d.getHours()),
      padDate(d.getMinutes()),
      padDate(d.getSeconds()),
      '_',
      name,
      '.js'
    ];

    var fPath = migrationDir+'/'+migrateFileParts.join('');
    fs.writeFileSync(fPath, templates.generator);
    exit('Created ' + fPath);
  });

  program
  .command('migrate:run')
  .option('-e, --environment [value]', 'Specify the environment to run migrate.')
  .description('       Run all migrations that have not yet been run.')
  .action(function() {
    var env = argv.e || 'development';
    var config = npdFile()[env];

    if(!config) {
      exitWithError(env + ' is not specified environemnt.');
    }

    config.env = env;
    config.cwd = migrationFilePath();

    new Migrator.Runner(config).run()
    .then(function(data){
      exit(chalk.cyan(data.map(function(path){ return "Migrated" + path; }).join("\n")));
    })
    .catch(exitWithError);
  });

  program
  .command('migrate:rollback')
  .option('-e, --environment [value]', 'Specify the environment to run migrate.')
  .description('       Rollback the last set of migrations performed.')
  .action(function() {
    var env = argv.e || 'development';
    var config = npdFile()[env];

    if(!config) {
      exitWithError(env + ' is not specified environemnt.');
    }

    config.env = env;
    config.cwd = migrationFilePath();

    new Migrator.Runner(config).rollback()
    .then(function(data){
      exit(chalk.cyan('Rollbacked ' + data));
    })
    .catch(exitWithError);
  });

  program
  .command('listTables')
  .option('-e, --environment [value]', 'Specify the environment to run migrate.')
  .description('      list all tables')
  .action(function() {
    var env = argv.e || 'development';
    var root = process.cwd();
    var config = npdFile()[env];
    var npd = require('../../index').createClient(config.dynamoClient);

    if(!config) {
      exitWithError(env + ' is not specified environemnt.');
    }

    npd().showTables()
    .then(function(tables){
      exit(tables.TableNames.join("\n"));
    })
    .catch(exitWithError);
  });

  program
  .command('dump <table>')
  .option('-e, --environment [value]', 'Specify the environment to run migrate.')
  .description('       Dump specified table contents.')
  .action(function(table) {
    var env = argv.e || 'development';
    var root = process.cwd();
    var config = npdFile()[env];
    var npd = require('../../index').createClient(config.dynamoClient);

    if(!config) {
      exitWithError(env + ' is not specified environemnt.');
    }

    npd().table(table).all()
    .then(function(data){
      exit(data);
    })
    .catch(exitWithError);
  });

  program
  .command('*')
  .action(function(cmd){
    exitWithError("npd: " + cmd +" is not a npd command. See 'npd --help'.");
  });

  program.parse(process.argv);

  if(argv._.length === 0) {
    program.help();
  }
}

var cli = new Liftoff({
  name: 'npd',
  extensions: interpret.jsVariants,
  v8flags: require('v8flags')
});

cli.launch({
  cwd: argv.cwd,
  configPath: argv.knexfile,
  require: argv.require,
  completion: argv.completion
}, initialize);
